PY > JS
--------------------------------------------------------------------------------

REPLACE AUTOMATICI:
^([ ]*)# > \1//
True > true
False > false
None > null
def ([^(]+)\((.*)\): > this.\1 = function(\2) {
if (.*): > if (\1) {
elif (.*): > else if (\1) {
else: > else {
for (.*): > for (\1) {
.append\( > .push\(
([a-zA-Z0-9_\(\)'"+/* \[\].-]+) if ([a-zA-Z0-9_\(\)'"+/* \[\].-]+) else ([a-zA-Z0-9_\(\)'"+/* \[\].-]+) > \2 ? \1 : \3
logging\. > console\.
is null > == null
is not null > != null
 and  >  &&  [verificare 1x1]
 or  >  ||  [verificare 1x1]
not  > ! [verificare 1x1]
[].append() > [].push()
isinstance\(([^)]+), ([a-z]+)\) > isinstance(\1, '\2')   [ma va verificato il risultato, modifica solo gli isinstance semplici]
copy.deepcopy > deepcopy
\.find\( > \.indexOf\(
} except { > } catch (exception) {
\.upper\(\) > \.toUpperCase\(\)
\.lower\(\) > \.toLowerCase\(\)
utils\.dict_merge\( > dict_merge\(
utils\.read_duration\( > read_duration\(
json\.dumps\( > JSON\.stringify\(

REPLACE MANUALI:
hasattr(x, y) > y in x
v[1:-1] > v.slice(1,-1)
v[:x] > v.slice(0, x)
x[x + 1:] > v.slice(x + 1)
re.match(regex, str) > str.match(regex) [il risultato è un array, 0 = str]
entry_id = re.sub('[^A-Za-z0-9_-]+', '-', definition_id) > entry_id = definition_id.replace(/[^A-Za-z0-9_-]+/g, '-');
x = re.compile('...') > x = /.../ [oppure x = new RegExp()]
- NOTA REGEXP ?P<xxx> > ?P<xxx> [e per ottenere i named groups bisogna fare result.groups (invece di groupdict())]
- NOTA REGEXP2: Se l'espressione contiene \[ o \] devono essere sostituiti in \\[ e \\]
 in > [Può rimanere cosi' se fa riferimento a un "dict", altrimenti deve diventare array.includes(X)]
- La stessa cosa per i "for (a in ['x'])" che da gli indici (0 e non 'x')
- Ma si può fare "for (a of ['x'].values())"
for (k, v in x.items()) { > for ([k, v] of Object.entries(x)) {
#NO: len(x) > [x.length se x è un array, Object.keys(x).length se è un dict, ma ho creato la function len(x) quindi non c'è bisogno]
this._events = { **this._events, **pm.events()}; | this._events = Object.assign({}, this._events, pm.events());
array.remove(v) > array_remove(array, v)

REPLACE COMPLESSI:
if (array) > if (array.length) [in js: if (array_vuoto) => if (true) ]

this.subscription_thread = threading.Thread(target = _subscription_timer_thread, daemon = true);
this.subscription_thread.start();
>
this.subscription_thread = thread_start(this._subscription_timer_thread.bind(this), false);

mqtt.connect(lambda phase: _mqtt_connect_callback(callback, phase));
>
mqtt.connect(function(phase) {
  _mqtt_connect_callback(callback, phase));
});

